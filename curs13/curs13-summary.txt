
--------------------------
Enums
	- enumeration: a predefined set of fixed values
	- naming: always with uppercase
	- examples: CardinalPoints {NORTH,SOUTH,WEST,EAST}, days of week, months. 
	You can also model business related information. eg. Chocolate type enum: WHITE, MILK, DARK;
	
	defintion:
	public enum CardinalPoints{
		NORTH, 
		SOUTH, 
		WEST, 
		EAST;
	}

	- actually they are an instance of that class

	eg:
	enum Day{
		MONDAY,
		TUESDAY,
		...
	}

	- each constant is basically an instance of type Day
	- that's why you can define attributes on them:

	enum Day{
	 MONDAY(1),
	 TUESDAY(2);

	 private final int position;

	 Day(int position){
	 this.position=position;
	 }

	 int getPosition(){
	 return this.position;
	 }

	}
	
----------------------------------------------------------------------------------------------------------------------
Exceptions:
	- an event that disrupts the normal flow of an algorithm
	 eg: wrong user input. File access error
	- when an error occurs in a method, an object is created containing information about the error and it's passed to the runtime. That object is the exception.
	- the process of creating the exception and giving it to the runtime is called throwing an exception

	Call Stack:
		- the methods that are called ordered from the latest to the earliest method:
		eg: let's say we have the scenario where the calls are main -> printDocument -> findDocument ->readId. The stack will look like:
			- readId()
			- findDocument
			- printDocument
			- main

	- if an exception is thrown from any method, it will search for a handler in the caller methods working it's way down the call stack.
	- if no handler is defined, then java runtime will handle it generically.
	- the flow of the algorithm is stoped when an exception is thrown.

	Exception types:
		checked exceptions: 
			- these are exceptions that are anticipated and the application should recover from them.
			- the base class for checked exceptions is java.lang.Exception
			- any method that throws checked exceptions or uses methods that throw checked exceptions is subject to Catch or Specify Requirement. That means that the method should either
				- catch the exception and deal with it inside the method
				- pass it forward to the caller, by specifing throws in the method's signature

		runtime exceptions (unchecked exceptions): 
			- exceptions that the application can't anticipate and usually can't recover from.
			- the base class for runtime exceptions is RuntimeException
			- usually they show a bug in the code, so instead of catching them, we should fix the bug. But with the increasing popularity of lambdas, we use unchecked exceptions with the role that we gave checked exceptions in the past
			- runtime exceptions are not subject to Catch or Specify Requirement
		
		errors:
			- exceptional conditions that are external to the application. The application cannot recover from them
			- for example, when reading a file and the operation is not performed because of a hardware problem
			- the base class for errors is Error
			- the errors are not subject to Catch or Specify Requirement

	When to use unchecked or checked exceptions?
	If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.

	Catching and handling exceptions:
		- the try block:
			- in order to catch an exception we need to call the method that throws the exception inside a try block:
				eg. try{
					a.iWillThrowUp();
				}
		- the catch block:
			- in order to handle an exception you must define a catch for each distinct exception you want to handle
			eg:
				try{
					a.iWillThrowUp();
				} catch(NotFeelingWellException nfwe){

				}catch(FeelingDizzyException fde){

				}
			- as you see, for a single try block we can define multiple catch blocks
			- if two exception handlers are the same we can handle both exceptions in a single block:
			try{
				a.iWillThrowUp();
			} catch(NotFeelingWellException | FeelingDizzyException ex){

			}
		- the finally block:
			- the finally block ALWAYS executes after a try block is finished
			- use this event when you don't expect to have exceptions, but you need the code to be executed regardless of the circumstances
			- the finally block is used to clean up resources. For this there is a more specialized implementation of the try block: try-with-resources : try will receive a parameter that HAS to implement Closeable
			eg: try(closeable){

			}

	Specifying the exceptions thrown by a method:
		- if you use in your method other methods that throw checked exceptions, you either handle them with try-catch or pass the exception to your method's caller
		- you pass the exception down the call stack by adding throws <class of exception> to your method's signature:
		public void readingFile(String filename) throws FileNotFoundException, IndexOutOfBoundsException  {

		}
		- as you see you can declare multiple exceptions that are thrown or passed over in your method

	Throwing exceptions
		- ok, but what if I want to throw exceptions in my algorithm
		- for this you have the throw statement:
			eg: throw new EmptyStackExceptions();
		- the object thrown has to implement one of : Exception, RuntimeException, Error. Or implement their base class: Throwable

	Custom Exceptions:
		- java provides a lot of checked and unchecked exceptions like: IllegalArgumentException, NullPointerException, NumberFormatException
		- but we can define our own. We just have to implement Throwable or extend Exception or RuntimeException. Then we can throw our custom exception




